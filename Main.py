# -*- coding: utf-8 -*-
"""opo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbGRivhGCysGbVOUarw9xgNc2Urp6xlA
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import time
import osmnx as ox
import folium
from geopy.distance import great_circle
import networkx as nx
from shapely.geometry import Point
from streamlit_folium import folium_static
from simpful import *
import itertools

# ----------------------- Configuration -----------------------
ox.settings.use_cache = True
ox.settings.log_console = True

# ----------------------- Fuzzy Variable Setup -----------------------

FS = FuzzySystem()

# Temperature in °F
FS.add_linguistic_variable("temperature", LinguisticVariable([
    FuzzySet(function=Trapezoidal_MF(a=80, b=80, c=95, d=97), term="hypothermia"),
    FuzzySet(function=Trapezoidal_MF(a=95, b=97, c=100, d=102), term="normal"),
    FuzzySet(function=Trapezoidal_MF(a=100, b=103, c=112, d=112), term="high_fever")
], universe_of_discourse=[80, 112]))

# Systolic BP
FS.add_linguistic_variable("systolic_bp", LinguisticVariable([
    FuzzySet(function=Trapezoidal_MF(a=80, b=80, c=95, d=110), term="low"),
    FuzzySet(function=Triangular_MF(a=100, b=120, c=135), term="normal"),
    FuzzySet(function=Trapezoidal_MF(a=130, b=140, c=180, d=180), term="high")
], universe_of_discourse=[80, 180]))

# Diastolic BP
FS.add_linguistic_variable("diastolic_bp", LinguisticVariable([
    FuzzySet(function=Trapezoidal_MF(a=50, b=50, c=70, d=80), term="low"),
    FuzzySet(function=Triangular_MF(a=70, b=80, c=90), term="normal"),
    FuzzySet(function=Trapezoidal_MF(a=85, b=90, c=120, d=120), term="high")
], universe_of_discourse=[50, 120]))

# Heart Rate
FS.add_linguistic_variable("heart_rate", LinguisticVariable([
    FuzzySet(function=Trapezoidal_MF(a=40, b=40, c=60, d=70), term="low"),
    FuzzySet(function=Triangular_MF(a=65, b=80, c=95), term="normal"),
    FuzzySet(function=Trapezoidal_MF(a=90, b=110, c=180, d=180), term="high")
], universe_of_discourse=[40, 180]))

# Oxygen Saturation
FS.add_linguistic_variable("oxygen_sat", LinguisticVariable([
    FuzzySet(function=Trapezoidal_MF(a=50, b=50, c=75, d=80), term="critical"),
    FuzzySet(function=Triangular_MF(a=75, b=80, c=85), term="serious"),
    FuzzySet(function=Trapezoidal_MF(a=83, b=88, c=100, d=100), term="normal")
], universe_of_discourse=[50, 100]))

# Age in months
FS.add_linguistic_variable("age", LinguisticVariable([
    FuzzySet(function=Trapezoidal_MF(a=0, b=0, c=180, d=240), term="child"),
    FuzzySet(function=Triangular_MF(a=200, b=420, c=720), term="adult"),
    FuzzySet(function=Trapezoidal_MF(a=660, b=780, c=1200, d=1200), term="elderly")
], universe_of_discourse=[0, 1200]))

# Output variable: condition (0 = normal, 100 = critical)
FS.add_linguistic_variable("condition", LinguisticVariable([
    FuzzySet(function=Triangular_MF(a=0, b=0, c=40), term="normal"),
    FuzzySet(function=Triangular_MF(a=30, b=50, c=70), term="serious"),
    FuzzySet(function=Triangular_MF(a=60, b=100, c=100), term="critical")
], universe_of_discourse=[0, 100]))

# ----------------------- Fuzzy Rule Generation -----------------------

antecedents = {
    'temperature': ['hypothermia', 'normal', 'high_fever'],
    'systolic_bp': ['low', 'normal', 'high'],
    'diastolic_bp': ['low', 'normal', 'high'],
    'heart_rate': ['low', 'normal', 'high'],
    'oxygen_sat': ['critical', 'serious', 'normal'],
    'age': ['child', 'adult', 'elderly']
}

#Rule
rule[]
{
    
}

with open("meaningful_rules (2).txt") as f:
    RULES = [line.strip() for line in f if line.strip()]
    FS.add_rules(RULES)

# ----------------------- Evaluation Function -----------------------

def classify_fuzzy(temp, oxy, hr, sbp_val, dbp_val, age_val):
    start = time.time()
    FS.set_variable("temperature", temp)
    FS.set_variable("oxygen_sat", oxy)
    FS.set_variable("heart_rate", hr)
    FS.set_variable("systolic_bp", sbp_val)
    FS.set_variable("diastolic_bp", dbp_val)
    FS.set_variable("age", age_val)

    try:
        result = FS.inference()
        score = result['condition']
        if score <= 40:
            return "🟢 Stable", score
        elif score <= 70:
            return "🟠 Serious", score
        else:
            return "🔴 Critical", score
    except Exception as e:
        st.error(f"Simpful system error: {str(e)}")
        return "⚪ Unknown", 0

# ----------------------- Data Loading -----------------------

@st.cache_data
def load_patients():
    if os.path.exists("triaged_patients.csv"):
        return pd.read_csv("triaged_patients.csv")
    return pd.DataFrame(columns=['Temperature (°F)', 'Oxygen Saturation (%)', 'Heart Rate (bpm)',
                                 'Systolic BP (mmHg)', 'Diastolic BP (mmHg)', 'Age (months)',
                                 'Triage_Priority', 'Risk_Score', 'Address'])

# ----------------------- Dataframe Helper Functions (New) -----------------------

# This function formats the 'Triage_Priority' column with emojis.
def format_with_labels(df):
    df_copy = df.copy()
    priority_map = {
        "🟢 Stable": "🟢 Stable",
        "🟠 Serious": "🟠 Serious",
        "🔴 Critical": "🔴 Critical"
    }
    df_copy['Triage_Priority'] = df_copy['Triage_Priority'].map(priority_map).fillna(df_copy['Triage_Priority'])
    return df_copy

# This function applies highlighting based on Triage_Priority.
def highlight_row(row):
    if "Critical" in row['Triage_Priority']:
        return ['background-color: #581d29'] * len(row) # Darker red for critical
    elif "Serious" in row['Triage_Priority']:
        return ['background-color: #5e4e20'] * len(row) # Darker yellow for serious
    elif "Stable" in row['Triage_Priority']:
        return ['background-color: #003322'] * len(row) # Darker green for stable
    return ['background-color: #001a33'] * len(row) # Default background


# ----------------------- Routing Function -----------------------

def get_route(source_address, destination_address):
    try:
        source_lat, source_lon = ox.geocode(source_address)
        dest_lat, dest_lon = ox.geocode(destination_address)
    except Exception as e:
        st.warning(f"Geocoding failed: {e}. Using default coordinates.")
        source_lat, source_lon = 33.713502, 73.02452  # Default to G-13/1 Islamabad
        dest_lat, dest_lon = 33.6939, 73.0621  # Default to G-8/3 Islamabad

    # Calculate midpoint and distance
    mid_lat = (source_lat + dest_lat) / 2
    mid_lon = (source_lon + dest_lon) / 2
    dist_points_km = great_circle((source_lat, source_lon), (dest_lat, dest_lon)).km
    graph_radius_m = max(dist_points_km * 1000 * 0.75, 2000)  # at least 2 km buffer

    try:
        G = ox.graph_from_point(
            center_point=(mid_lat, mid_lon),
            dist=graph_radius_m,
            network_type="drive",
            simplify=True,
            retain_all=True
        )

        # Add speeds and travel time
        G = ox.add_edge_speeds(G)
        G = ox.add_edge_travel_times(G)

        # Penalize roads not suitable for ambulances
        penalty_factor = 5
        for u, v, k, data in G.edges(keys=True, data=True):
            hwy = data.get('highway', '')
            if isinstance(hwy, list):
                hwy = hwy[0]
            if hwy in ['service', 'living_street', 'track', 'footway', 'pedestrian']:
                data['travel_time'] *= penalty_factor

        # Get nearest nodes
        orig_node = ox.nearest_nodes(G, X=source_lon, Y=source_lat)
        dest_node = ox.nearest_nodes(G, X=dest_lon, Y=dest_lat)

        # Calculate max speed for heuristic
        max_graph_speed_mps = 0
        # Ensure 'travel_time' exists before using it
        for u, v, data in G.edges(data=True):
            if 'travel_time' in data and data['travel_time'] > 0:
                speed_mps = data['length'] / data['travel_time']
                if speed_mps > max_graph_speed_mps:
                    max_graph_speed_mps = speed_mps

        if max_graph_speed_mps == 0:
            max_graph_speed_mps = 33.3  # Approx 120 km/h fallback (for safety)

        def admissible_heuristic_time(u, v):
            u_coords = (G.nodes[u]['y'], G.nodes[u]['x'])
            v_coords = (G.nodes[v]['y'], G.nodes[v]['x'])
            dist_m = great_circle(u_coords, v_coords).meters
            return dist_m / max_graph_speed_mps

        # Find shortest path
        shortest_route_nodes = nx.astar_path(
            G,
            source=orig_node,
            target=dest_node,
            heuristic=admissible_heuristic_time,
            weight="travel_time"
        )

        # Calculate route stats
        route_length_m = 0
        route_travel_time_s = 0
        for i in range(len(shortest_route_nodes) - 1):
            u = shortest_route_nodes[i]
            v = shortest_route_nodes[i+1]
            # Handle potential multiple edges between u and v, and ensure 'travel_time' key exists
            edge_data = G.get_edge_data(u, v)
            if edge_data:
                # Get the first edge's data (assuming travel_time is consistent if multiple)
                first_edge = edge_data[0]
                if 'length' in first_edge and 'travel_time' in first_edge:
                    route_length_m += first_edge['length']
                    route_travel_time_s += first_edge['travel_time']
                else:
                    st.warning(f"Missing 'length' or 'travel_time' for edge ({u}, {v}). Skipping this edge in stats.")
            else:
                st.warning(f"No edge data found for ({u}, {v}). Skipping this edge in stats.")


        # Create map
        route_points = [(G.nodes[node]['y'], G.nodes[node]['x']) for node in shortest_route_nodes]
        mid_lat_route = sum(p[0] for p in route_points) / len(route_points)
        mid_lon_route = sum(p[1] for p in route_points) / len(route_points)

        route_map = folium.Map(location=[mid_lat_route, mid_lon_route], zoom_start=14, tiles="cartodbpositron")

        # Add route
        folium.PolyLine(
            route_points,
            color='red',
            weight=5,
            opacity=0.7
        ).add_to(route_map)

        # Add markers
        folium.Marker(
            location=[source_lat, source_lon],
            popup=f"Patient Location: {source_address}",
            icon=folium.Icon(color='green', icon='user')
        ).add_to(route_map)

        folium.Marker(
            location=[dest_lat, dest_lon],
            popup=f"Hospital: {destination_address}",
            icon=folium.Icon(color='blue', icon='hospital')
        ).add_to(route_map)

        return route_map, route_length_m/1000, route_travel_time_s/60

    except nx.NetworkXNoPath:
        st.error("No path found between the specified locations. They might be in disconnected parts of the network or too far apart.")
        return None, None, None
    except Exception as e:
        st.error(f"Routing error: {str(e)}")
        return None, None, None

# ----------------------- Streamlit UI -----------------------
st.set_page_config(layout="wide", page_title="Smart Health Emergency System")

# Custom CSS
st.markdown("""
    <style>
        html, body, [class*="css"] {
            background-color: #000000;
            color: #e6faff;
            font-family: 'Poppins', sans-serif;
        }
        h1, h2, h3, h4 {
            font-family: 'Poppins', sans-serif;
            letter-spacing: 0.5px;
        }
        .stButton>button {
            background: linear-gradient(to right, #00f6ff, #00ffa2);
            color: black;
            font-weight: 600;
            padding: 0.5em 2em;
            border-radius: 10px;
            border: none;
        }
        .stButton>button:hover {
            background: linear-gradient(to right, #40f9ff, #40ffc9);
            color: black;
        }
        .metric-card {
            background-color: #001a33;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
            box-shadow: 0 4px 6px rgba(0, 210, 255, 0.1);
        }
        .leaflet-container {
            background-color: #000 !important;
        }
        .route-box {
            background-color: #001a33;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid #00d3ff;
        }
        h1 {
            text-align: center;
        }

        /* Specific styling for the form container if desired */
        .patient-form-card {
            background-color: #001a33; /* Adding background to the form itself */
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 210, 255, 0.1);
        }

    </style>
""", unsafe_allow_html=True)

st.title("🚑 Smart Health Emergency System")

# Initialize session state
if "patients_df" not in st.session_state:
    st.session_state.patients_df = load_patients()

if "show_route" not in st.session_state:
    st.session_state.show_route = False

# Main layout
tab1, tab2 = st.tabs(["Patient Assessment", "Emergency Route Planner"])

# ------------------ TAB 1: Patient Assessment ------------------
with tab1:
    st.markdown("### 📋 Patient Assessment", unsafe_allow_html=True)

    col_left, col_center, col_right = st.columns((1, 3, 1))

    with col_center:
        st.markdown('<div class="patient-form-card">', unsafe_allow_html=True)
        with st.form("patient_form"):
            st.markdown("#### Patient Vitals")
            temp = st.number_input("🌡️ Temperature (°F)", min_value=80.0, max_value=112.0, value=98.6, step=0.1)
            oxy = st.number_input("🪁 Oxygen Saturation (%)", min_value=50, max_value=100, value=95)
            hr = st.number_input("❤️ Heart Rate (bpm)", min_value=40, max_value=180, value=75)
            sbp = st.number_input("🩸 Systolic BP (mmHg)", min_value=80, max_value=180, value=120)
            dbp = st.number_input("🩸 Diastolic BP (mmHg)", min_value=50, max_value=120, value=80)

            st.markdown("#### Patient Information")
            age_val = st.number_input("👤 Age", min_value=0, max_value=120, value=25)
            age_unit = st.selectbox("📏 Age Unit", ("Years", "Months"))
            address = st.text_input("🏠 Patient Address", "Street 113, G-13/1, Islamabad, Pakistan")

            submitted = st.form_submit_button("⚕️ Assess Patient")
        st.markdown('</div>', unsafe_allow_html=True)

    if submitted:
        age_in_months = age_val * 12 if age_unit == "Years" else age_val
        result, score = classify_fuzzy(temp, oxy, hr, sbp, dbp, age_in_months)
        color = "#00ffa2" if "Stable" in result else "#ffde59" if "Serious" in result else "#ff4c73"

        with col_center:
            st.markdown(f"<h3 style='text-align:center; color:{color};'>Patient Status: <b>{result}</b> (Score: {score:.1f})</h3>", unsafe_allow_html=True)

            fig, ax = plt.subplots(figsize=(8, 1.5))
            ax.barh([0], [score], color=color, height=0.5)
            ax.set_xlim(0, 100)
            ax.set_xticks([0, 20, 40, 60, 80, 100])
            ax.set_xticklabels(['Normal', '', 'Serious', '', 'Critical', ''])
            ax.set_yticks([])
            ax.set_title('Risk Score Visualization', color='white')
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.spines['bottom'].set_color('#00f6ff')
            ax.tick_params(colors='white')
            fig.patch.set_facecolor('#000000')
            st.pyplot(fig)

            new_row = pd.DataFrame([{
                "Temperature (°F)": temp,
                "Oxygen Saturation (%)": oxy,
                "Heart Rate (bpm)": hr,
                "Systolic BP (mmHg)": sbp,
                "Diastolic BP (mmHg)": dbp,
                "Age (months)": age_in_months,
                "Triage_Priority": result,
                "Risk_Score": score,
                "Address": address
            }])
            st.session_state.patients_df = pd.concat([st.session_state.patients_df, new_row], ignore_index=True)
            st.session_state.patients_df.to_csv("triaged_patients.csv", index=False)

            if "Critical" in result:
                st.session_state.show_route = True
            else:
                st.session_state.show_route = False

    st.markdown("---")
    st.markdown("### 📊 Patient Records")

    # Corrected indentation for the block that displays patient records
    if not st.session_state.patients_df.empty:
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown(f"<div class='metric-card'><h4>👥 Total Patients</h4><h2>{len(st.session_state.patients_df)}</h2></div>", unsafe_allow_html=True)

        with col2:
            critical_count = sum("Critical" in p for p in st.session_state.patients_df['Triage_Priority'])
            st.markdown(f"<div class='metric-card'><h4>🔴 Critical Cases</h4><h2>{critical_count}</h2></div>", unsafe_allow_html=True)

        with col3:
            avg_score = st.session_state.patients_df['Risk_Score'].mean()
            st.markdown(f"<div class='metric-card'><h4>📈 Avg. Risk Score</h4><h2>{avg_score:.1f}</h2></div>", unsafe_allow_html=True)

        
        with st.container():
            st.markdown("#### Condition Distribution", unsafe_allow_html=True)
            counts = st.session_state.patients_df['Triage_Priority'].value_counts()
            categories = ["🟢 Stable", "🟠 Serious", "🔴 Critical"]
            counts = counts.reindex(categories).fillna(0)
            sizes = counts.values
            labels = [label.replace("🟢 ", "").replace("🟠 ", "").replace("🔴 ", "") for label in counts.index]
            colors = ['#00fff7', '#ffde59', '#ff4c73']

            fig, ax = plt.subplots(figsize=(3, 3), facecolor='black')
            wedges, texts, autotexts = ax.pie(
                sizes,
                labels=None,
                colors=colors,
                autopct='%1.1f%%',
                startangle=90,
                pctdistance=0.7,
                textprops={'color': 'white', 'fontsize': 9, 'weight': 'bold'},
                wedgeprops={'width': 0.4, 'edgecolor': 'black'}
            )
            centre_circle = plt.Circle((0, 0), 0.50, fc='black')
            fig.gca().add_artist(centre_circle)
            ax.set_title("Triage Summary", fontsize=11, color='#00fff7', pad=3)
            ax.legend(wedges, labels, title="Status", loc="center left",
                      bbox_to_anchor=(1, 0.5), fontsize=9, title_fontsize=10,
                      labelcolor='white', frameon=False)
            ax.axis('equal')
            # fig.tight_layout(rect=[0, 0, 0.85, 1])
            fig.tight_layout(pad=0)

            st.pyplot(fig)

        st.markdown("#### Detailed Records")

        # Ensure the DataFrame is not empty before attempting to apply styling
        if not st.session_state.patients_df.empty:
            formatted_df = format_with_labels(st.session_state.patients_df[::-1].reset_index(drop=True))
            st.dataframe(
                formatted_df.style.apply(highlight_row, axis=1),
                use_container_width=True,
                height=min(400, 35 * (len(formatted_df) + 1))
            )
        else:
            st.info("No detailed records to display.")


        if st.button("🧹 Clear All Patient Data", type="secondary"):
            if os.path.exists("triaged_patients.csv"):
                os.remove("triaged_patients.csv")
            st.session_state.patients_df = pd.DataFrame(columns=st.session_state.patients_df.columns)
            st.rerun()
    else: # This else block was misaligned, now it is correctly placed
        st.info("No patient records available. Add patient data to see records and charts.")


with tab2:
    st.markdown("### 🗺️ Emergency Route Planner")

    with st.container():
        st.markdown("<div class='route-box'>", unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            source_address = st.text_input("📍 Source Address", "Street 113, G-13/1, Islamabad, Pakistan")

        with col2:
            destination_address = st.text_input("🏥 Destination Address", "Hanna Rd, G-8/3, Islamabad, Pakistan")

        if st.button("🚑 Calculate Optimal Route"):
            with st.spinner("Finding the fastest ambulance route..."):
                route_map, distance_km, time_min = get_route(source_address, destination_address)

                if route_map:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>🚑 Route Details</h4>
                        <p>Distance: {distance_km:.2f} km</p>
                        <p>Estimated Time: {time_min:.1f} minutes</p>
                    </div>
                    """, unsafe_allow_html=True)

                    # Display the map
                    folium_static(route_map, width=700, height=500)
                else:
                    st.error("Could not calculate route. Please check the addresses and try again.")

        st.markdown("</div>", unsafe_allow_html=True)

